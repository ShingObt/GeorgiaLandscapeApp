/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var lt8sr = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR"),
    l5 = ee.ImageCollection("LANDSAT/LT05/C01/T1_SR"),
    NAIP = ee.ImageCollection("USDA/NAIP/DOQQ"),
    lt7t1 = ee.ImageCollection("LANDSAT/LE07/C01/T1_SR"),
    browsing = /* color: #d63000 */ee.Geometry.Point([-83.115036380291, 33.81891611751294]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// Use a DateSlider to create annual composites of this collection.
// var collection = ee.ImageCollection('LANDSAT/LC08/C01/T1');
//================================================
// Landsat 5 processing
//================================================
{
var stepwise=4
var year=1984//77
var startmonth=4//special treatment between 1994-1996 as imagery 1995 contains many clouds. In that season, mosaicking starts from April. Rest of the years, it starts from August. Length of mosaicking is the same over 2 groups.
var mosaicLength=5
var bands=['B3','B2','B1','pixel_qa']
var lt5sr = l5
    .filterBounds(browsing)
    .filterDate("1984-01-01","2013-01-01")
    .filterMetadata("CLOUD_COVER","less_than",10)
    .select(bands)
var series5 = lt5sr.map(function(image) {
  var cfmask= image.select('pixel_qa');
    return image.updateMask(cfmask.eq(66))
    .rename('Red','Green','Blue','pixel_qa');;
});
}
//================================================
// Landsat 7 processing
//================================================
{
var bands=['B3','B2','B1','pixel_qa']
var lt7 = lt7t1
    .filterBounds(browsing)
    .filterDate("2011-01-01","2019-12-31")
    .filterMetadata("CLOUD_COVER","less_than",10)
    .select(bands)
var series7 = lt7.map(function(image) {
  var cfmask= image.select('pixel_qa');
    return image.updateMask(cfmask.eq(66))
    .rename('Red','Green','Blue','pixel_qa');
});
}
//================================================
// Landsat 8 processing
//================================================
{
var bands=['B4','B3','B2','pixel_qa']
var lt8sr = lt8sr
    .filterBounds(browsing)
    .select(bands)
var series = lt8sr.map(function(image) {
  var pqa= image.select('pixel_qa');
  var ret=image.updateMask(pqa.eq(322))
  .rename('Red','Green','Blue','pixel_qa');
  return ret
    return image.updateMask(pqa.eq(322));
});

var collection=ee.ImageCollection(
  series5
  .merge(series7)
  .merge(series))
print(collection,"image collection")

}


// Use the start of the collection and now to bound the slider.
var start = ee.Image(collection.first()).date().get('year').format();
var now = Date.now();
var end = ee.Date(now).format();
print(start,now,end)



// Run this function on a change of the dateSlider.
var showMosaic = function(year) {
    var date = ee.Date.fromYMD(year, startmonth, 30);
    var dateRange = ee.DateRange(date, date.advance(mosaicLength, 'month'));//mosaicLength defines the length of months imagery are taken.
    var image = collection
            .filterDate(dateRange.start(),dateRange.end())
            .mosaic();
    ee.Date(year).get("year").evaluate(function(name) {
    var visParams = {
      bands: ['Red', 'Green', 'Blue'], 
      max: 1500,
      min: 100
    };
    var layer = ui.Map.Layer(image, visParams, name + ' composite');
    Map.layers().set(0, layer);
  });
  
};
var range=ee.DateRange(start, end)
print(range)
// print(range.start().get("year"))
// Asynchronously compute the date range and show the slider.
var dateRange = ee.DateRange(start, end).evaluate(function(range) {
  var dateSlider = ui.DateSlider({
    start: ee.Date(range.start().get("year")),
    end: ee.Date(range.end().get("year")),
    value: null,
    period: 1,
    // onChange: showMosaic
    onChange: print("gaga")
  });
  Map.add(dateSlider.setValue(now));
});



// // Load and display NDVI data.
// var ndvi = ee.ImageCollection('LANDSAT/LC8_L1T_8DAY_NDVI')
//     .filterDate('2014-01-01', '2015-01-01');
// Map.addLayer(ndvi.median(), {min: 0, max: 1, palette: ['99c199', '006400']}, 'NDVI');

// // Configure the map.
// Map.setCenter(-94.84497, 39.01918, 8);
// Map.style().set('cursor', 'crosshair');

// // Create an empty panel in which to arrange widgets.
// // The layout is vertical flow by default.
// var panel = ui.Panel({style: {width: '400px'}})
//     .add(ui.Label('Click on the map'));

// // Set a callback function for when the user clicks the map.
// Map.onClick(function(coords) {
//   // Create or update the location label (the second widget in the panel)
//   var location = 'lon: ' + coords.lon.toFixed(2) + ' ' +
//                 'lat: ' + coords.lat.toFixed(2);
//   panel.widgets().set(1, ui.Label(location));

//   // Add a red dot to the map where the user clicked.
//   var point = ee.Geometry.Point(coords.lon, coords.lat);
//   Map.layers().set(1, ui.Map.Layer(point, {color: 'FF0000'}));

//   // Create a chart of NDVI over time.
//   var chart = ui.Chart.image.series(ndvi, point, ee.Reducer.mean(), 200)
//       .setOptions({
//         title: 'NDVI Over Time',
//         vAxis: {title: 'NDVI'},
//         lineWidth: 1,
//         pointSize: 3,
//       });

//   // Add (or replace) the third widget in the panel by
//   // manipulating the widgets list.
//   panel.widgets().set(2, chart);
// });

// // Add the panel to the ui.root.
// ui.root.add(panel);