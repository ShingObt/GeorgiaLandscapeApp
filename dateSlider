/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var lt8sr = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR"),
    l5 = ee.ImageCollection("LANDSAT/LT05/C01/T1_SR"),
    NAIP = ee.ImageCollection("USDA/NAIP/DOQQ"),
    lt7t1 = ee.ImageCollection("LANDSAT/LE07/C01/T1_SR"),
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-84.8473132950872, 34.292302513480344],
          [-84.8473132950872, 33.51268042822552],
          [-83.1059802872747, 33.51268042822552],
          [-83.1059802872747, 34.292302513480344]]], null, false),
    tiger = ee.FeatureCollection("TIGER/2018/States"),
    disturbanceyear = ee.Image("users/sobata5632/junk3/WholeStateMasked_GABoundary");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var ga=tiger.filterMetadata("NAME","equals","Georgia")
var elev=ee.Image('CGIAR/SRTM90_V4').clip(ga)
var distyear=disturbanceyear.clip(ga)
//================================================
// Landsat 5 processing
//================================================

var bands=['B3','B2','B1','pixel_qa']
var lt5sr = l5
    .filterDate("1984-01-01","2013-01-01")
    .filterMetadata("CLOUD_COVER","less_than",10)
    .select(bands)
var series5 = lt5sr.map(function(image) {
  var cfmask= image.select('pixel_qa');
    return image.updateMask(cfmask.eq(66))
    .rename('Red','Green','Blue','pixel_qa');;
})

//================================================
// Landsat 7 processing
//================================================
var bands=['B3','B2','B1','pixel_qa']
var lt7 = lt7t1
    .filterDate("2011-01-01","2013-12-31")
    .filterMetadata("CLOUD_COVER","less_than",10)
    .select(bands)
var series7 = lt7.map(function(image) {
  var cfmask= image.select('pixel_qa');
    return image.updateMask(cfmask.eq(66))
    .rename('Red','Green','Blue','pixel_qa');
});
//================================================
// Landsat 8 processing
//================================================
{
var bands=['B4','B3','B2','pixel_qa']
var lt8sr = lt8sr
    .select(bands)
var series = lt8sr.map(function(image) {
  var pqa= image.select('pixel_qa');
  var ret=image.updateMask(pqa.eq(322))
  .rename('Red','Green','Blue','pixel_qa');
  return ret
    return image.updateMask(pqa.eq(322));
});
}
var collection=ee.ImageCollection(
  series5
  .merge(series7)
  .merge(series))
  .map(function(image){
    return image.clip(ga)
  })
print(collection,"image collection")





// Use the start of the collection and now to bound the slider.
var start = ee.Image(collection.first()).date().get('year').format();
var now = Date.now();
var end = ee.Date("2019-12-31").format();
var ltsStatus=true

// Run this function on a change of the dateSlider.
var showMosaic = function(range) {
  var start_leafon=range.start().advance(3, 'month')
  var end_leafon=range.start().advance(8,"month")
  // var mosaic = ee.Algorithms.Landsat.simpleComposite({
  //   collection: collection.filterDate(start_leafon, end_leafon)
  // });
  var image=collection
            .filterDate(start_leafon,end_leafon)
            .mean();
  // Asynchronously compute the name of the composite.  Display it.
  range.start().get('year').evaluate(function(name) {
    var visParams = {bands: ['Red', 'Green', 'Blue'], min: 100,max:1500};
    var layer = ui.Map.Layer(image, visParams, name + ' Landsat time series Jun-Aug composite');
    var layer2 = ui.Map.Layer(elev, {min:0,max:1000,palette:['000000', 'FFFF00', 'FFA500', 'FF4500', 'FF0000']}, "SRTM Digital Elevation Data Version 4");
    var layer3=ui.Map.Layer(distyear, {min:1987,max:2016,palette:['000000', 'FFFF00', 'FFA500', 'FF4500', 'FF0000']}, "Last disturbance year");
    Map.layers().set(0, layer2);
    Map.layers().set(1, layer3);
    Map.layers().set(2, layer);

  });
};

// Asynchronously compute the date range and show the slider.
var dateRange = ee.DateRange(start, end).evaluate(function(range) {
  var dateSlider = ui.DateSlider({
    start: range['dates'][0],
    end: range['dates'][1],
    value: null,
    period: 365,
    onChange: showMosaic,
    style: {width: '400px',position: "bottom-left"}
  });
  Map.add(dateSlider.setValue(now));
});

var checkbox2 = ui.Checkbox('Show Last disturbance year layer', true);
checkbox2.onChange(function(checked) {
  // Shows or hides the first map layer based on the checkbox's value.
  Map.layers().get(1).setShown(checked);
});
var checkbox = ui.Checkbox('Show SRTM layer', true);
checkbox.onChange(function(checked) {
  // Shows or hides the first map layer based on the checkbox's value.
  Map.layers().get(0).setShown(checked);
});
var checkbox0 = ui.Checkbox('Show Landsat time series layer', true);
checkbox0.onChange(function(checked) {
  // Shows or hides the first map layer based on the checkbox's value.
  Map.layers().get(2).setShown(checked);
  var ltsStatus=checked
});
Map.setCenter(-84.4161, 33.7529, 8);
Map.style().set('cursor', 'crosshair');
// Create an empty panel in which to arrange widgets.
// The layout is vertical flow by default.

var panel = ui.Panel({style: {width: '400px',position: "top-right"}})
    .add(ui.Label({
      value:"Landscape dataset of Georgia, United States",
      style:{fontWeight:"bold",fontSize:"20px"}
    }))
    .add(ui.Label('Click on the map. Then you will get the information about the point. It takes a while until the chart is shown. Thank you for your great patience in advance. If you need detailed explanation about this app, please refer to'))
    .add(ui.Label({
      value:" my GitHub repository.",
      style:{},
      targetUrl:"https://github.com/ShingObt"
    }))
    .add(ui.Label({
      value:"Raster layer filter",
      style:{fontWeight:"bold",fontSize:"14px"}
    }))
panel.widgets().set(4,checkbox0)
panel.widgets().set(5,checkbox2)
panel.widgets().set(6,checkbox)
  //   panel.style().set('color', 'red');
  // panel.style().set('fontWeight', 'bold');
Map.onClick(function(coords) {
  // Create or update the location label (the second widget in the panel)
  var location = 'lon: ' + coords.lon.toFixed(2) + ' ' +
                 'lat: ' + coords.lat.toFixed(2);
  panel.widgets().set(7, ui.Label("You are point of interest is "+location));
  // Add a red dot to the map where the user clicked.
  var point = ee.Geometry.Point(coords.lon, coords.lat);
  Map.layers().set(3, ui.Map.Layer(point, {color: 'FF0000'},"Point of interest"));
  var dy=distyear.reduceRegion(ee.Reducer.mean(),point,30)
  var el=elev.reduceRegion(ee.Reducer.mean(),point,30)
  print(el)
  panel.widgets().set(8, ui.Label("The last disturbance year: "+dy.get('b1').getInfo()));
  panel.widgets().set(9, ui.Label("Elevation: "+el.get('elevation').getInfo()));
  // Create a chart of NDVI over time.
  var chart = ui.Chart.image.series(collection.select("Red"), point, ee.Reducer.mean(), 200)
      .setOptions({
        title: 'Surface reflectance value of Landsat Red band between 1984-2019',
        vAxis: {title: 'Red band'},
        lineWidth: 1,
        pointSize: 3,
      });
      

  // Add (or replace) the third widget in the panel by
  // manipulating the widgets list.
  panel.widgets().set(10, chart);
});

// Add the panel to the ui.root.
print(checkbox0.getValue())

ui.root.add(panel);
